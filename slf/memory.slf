// default package

terminals s unit value if then else true false
          Unit fn Bool Ref ref loc emp Emp in x


syntax

n ::= 0 | s n

t ::= unit
  | if t then t else t
  | true
  | false
  | loc n

T ::= Unit
  | Bool
  | Ref T

Gamma ::= *
  | Gamma, x:T 
  
m ::= emp
  | t , m

M ::= Emp
  | T , M



judgment term-eq: t == t

------ eq
t == t


/** Allocation.
 * m <- t = loc n ! m' means
 * if we allocate a space for t in m, we get location n in a new memory m'
 */
judgment alloc: m <- t = loc n ! m

---------------------------- alloc-emp
emp <- t = loc 0 ! (t,emp)

m <- t = loc n ! m'
--------------------------------- alloc-nonemp
(t',m) <- t = loc s n ! (t',m')


/** Lookup.
 * m { n } = t
 * means we lookup n in m and get t
 */
judgment lookup: m { n } = t

----------- lookup-zero
(t,m){0} = t

m{n} = t'
-------------- lookup-nonzero
(t,m){s n} = t'


/** Update
 * {n -> t} m = m'
 * means we update location n in memory to be t and get new memory m'
 */
judgment update: {n -> t}m = m'

------------------------ update-zero
{0 -> t'}(t,m) = (t',m)

{n -> t'}m = m'
------------------------- update-nonzero
{s n -> t'}(t,m) = (t,m')


/** Type Lookup.
 * M { n } = T
 * means we lookup n in M and get T
 */
judgment type-lookup: M { n } = T

------------ type-lookup-zero
(T,M){0} = T

M{n} = T'
--------------- type-lookup-nonzero
(T,M){s n} = T'


/** Type Allocate
 * {n -> T}M = M'
 * means we allocate location n in memory to be T and get new memory-type M'
 * (This uses notation analogous to update because we know what
 * the "n" to use will be.)
 */
judgment type-allocate: {n -> T}M = M'

------------------------ type-allocate-zero
{0 -> T}Emp = (T,Emp)

{n -> T'}M = M'
------------------------- type-allocate-nonzero
{s n -> T'}(T,M) = (T,M')


judgment type: Gamma; M |- t : T

----------------------- T-Unit
Gamma; M |- unit : Unit

----------------------- T-True
Gamma; M |- true : Bool

----------------------- T-False
Gamma; M |- false : Bool

Gamma; M |- t0 : Bool
Gamma; M |- t1 : T
Gamma; M |- t2 : T
--------------------------------------- T-If
Gamma; M |- if t0 then t1 else t2 : T

M{n} = T
------------------------- T-Loc
Gamma; M |- loc n : Ref T


// Definition 13.5.1
// (We omit Gamma, and use M instead of Sigma)
// Also, M appears twice because it has two different roles to play
judgment memtyping: M |- m : M


--------------- emp-ok
M0 |- emp : Emp


*; M0 |- t : T
M0 |- m : M
------------------- nonemp-ok
M0 |- (t,m) : (T,M)


judgment includes: M >= M

-------- includes-emp
M >= Emp

M >= M'
--------------- includes-nonemp
(T,M) >= (T,M')


// First effectivesness lemma:
lemma can-allocate :
    forall m
    forall t
    exists m <- t = loc n ! m' .
    proof by unproved
    // EXTRA: easy induction
end lemma


// Second effectiveness lemma
lemma can-lookup-in-ok-mem :
    forall ok: M0 |- m : M
    forall L: M{n} = T
    exists m{n} = t .
    proof by unproved
    // EXTRA: Moderately easy induction
end lemma

// Third effectiveness lemma needed for progress
lemma can-update-in-ok-mem :
    forall o: M0 |- m : M
    forall L: M{n} = T
    forall t
    exists {n -> t}m = m'.
    proof by unproved
    // EXTRA: Moderately difficult induction
end lemma


// The next few helper lemmas give useful facts about inclusion

lemma includes-reflexive:
    forall M
    exists M >= M .
    proof by unproved
    // EXTRA: easy induction
end lemma

lemma includes-preserves-lookup:
    forall l: M{n} = T
    forall i: M' >= M
    exists M'{n} = T .
    proof by unproved
    // EXTRA: Moderate induction
end lemma


lemma can-type-allocate :
    forall o: M0 |- m : M
    forall a: m <- t = loc n ! m'
    forall T
    exists {n -> T}M = M' .
    proof by unproved
    // EXTRA: Moderate induction
end lemma

lemma type-allocate-implies-lookup :
    forall A: {n -> T}M = M'
    exists M'{n} = T .
    proof by unproved
    // EXTRA: Easy induction
end lemma

// helper lemma
lemma type-allocate-implies-includes :
    forall A: {n -> T}M = M'
    exists M' >= M .
    proof by unproved
    // EXTRA: Easy induction
end lemma

    