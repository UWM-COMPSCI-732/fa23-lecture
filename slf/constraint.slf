// default package

/* CompSci 657/732
 * Constraint Typing
 */

module constraint

requires

abstract judgment unknown: ???

provides

terminals unit value S
          Unit in fn some if true Var $ ground 


module Nat = org.sasylf.util.Natural

syntax

n = Nat.n ::= 0 | S n

t ::= unit
  | fn x => t[x]
  | x
  | t t
  | t,t
  | t@1
  | t@2

T ::= 
    Unit
  | T -> T
  | T * T
  | Var n

TT ::= $
  | T, TT

C ::= true
  | T = T
  | C & C

Gamma ::= *
      | Gamma, x : T


judgment greater = Nat.gt : n > n

judgment greaterequal = Nat.ge : n â‰¥ n

judgment plus = Nat.plus : n + n = n


judgment equality: t == t

   ------ eq
   t == t

judgment typeequality: T == T

------ type-eq
T == T


judgment isvar: t : T in Gamma
assumes Gamma

----------------------- var
x : T in (Gamma, x : T)


judgment var-free: T ground

------------ G-Unit
Unit ground

T1 ground
T2 ground
-------------- G-Pair
T1 * T2 ground

T1 ground
T2 ground
--------------- G-Arrow
T1 -> T2 ground


judgment var-frees : TT ground

--------- G-None
$ ground


T ground
TT ground
------------- G-Some
(T,TT) ground


/// The following relation cannot be expressed in SASyLF.
// Instead we define it in an unsound way,
// and ask you to only use the lemmas provided for you.

judgment context-var-free : Gamma ground
assumes Gamma

   ???
   ------------ never-use-this-in-any-step-pattern-match-andor-derivation
   Gamma ground
 
/// You may use the following lemmas:
   
lemma empty-ground:
    exists * ground
    proof by unproved // do not attempt to prove
end lemma

lemma add-ground:
    assumes Gamma
    forall g1: Gamma ground
    forall g2: T ground
    exists (Gamma, x:T) ground
    proof by weakening on g1
end lemma

lemma var-type-ground :
    assumes Gamma
    forall g:Gamma ground
    forall v: t:T in Gamma
    exists T ground 
    proof by unproved // do not attempt to prove
end lemma


judgment type: Gamma |- t : T
assumes Gamma

-------------------- T-Unit
Gamma |- unit : Unit

t:T in Gamma
-------------- T-Var
Gamma |- t : T

Gamma, x : T1 |- t[x] : T2
T1 ground
------------------------------------- T-Abs
Gamma |- (fn x => t[x]) : T1 -> T2

Gamma |- t1 : T2 -> T3
Gamma |- t2 : T2
----------------------- T-App
Gamma |- t1 t2 : T3

Gamma |- t1 : T1
Gamma |- t2 : T2
-------------------------- T-Pair
Gamma |- (t1,t2) : T1 * T2

Gamma |- t : T1 * T2
--------------------- T-Proj1
Gamma |- t@1 : T1

Gamma |- t : T1 * T2
--------------------- T-Proj2
Gamma |- t@2 : T2



judgment constrained-typing: Gamma; n |- t : T if C -| n
assumes Gamma

------------------------------------- CT-Unit
Gamma; n |- unit : Unit if true -| n

t : T in Gamma
------------------------------ CT-Var
Gamma; n |- t : T if true -| n

Gamma, x : Var n; S n |- t[x] : T2 if C -| n'
--------------------------------------------------- CT-Abs
Gamma; n |- (fn x => t[x]) : (Var n) -> T2 if C -| n'

Gamma; S n |- t1 : T1 if C1 -| n1
Gamma; n1 |- t2 : T2 if C2 -| n2
------------------------------------------------------------------------ CT-App
Gamma; n |- t1 t2 : Var n if (C1 & C2) & (T1 = T2 -> Var n) -| n2

Gamma; n0 |- t1 : T1 if C1 -| n1
Gamma; n1 |- t2 : T2 if C2 -| n2
----------------------------------------------- CT-Pair
Gamma; n0 |- (t1,t2) : T1 * T2 if C1 & C2 -| n2

Gamma; S S n |- t : T if C -| n1
---------------------------------------------------------------- CT-Proj1
Gamma; n |- t@1 : (Var n) if C & (T = (Var n) * Var (S n)) -| n1

Gamma; S S n |- t : T if C -| n1
------------------------------------------------------------------ CT-Proj2
Gamma; n |- t@2 : (Var S n) if C & (T = (Var n) * Var (S n)) -| n1



judgment subst-type: T {TT} = T

----------------- S-VarZ
Var 0 {T, TT} = T

Var n {TT} = T'
-------------------- S-VarS
Var S n {T,TT} = T'

---------------- S-Unit
Unit {TT} = Unit

T1 {TT} = T1'
T2 {TT} = T2'
------------------------ S-Pair
(T1*T2) {TT} = (T1'*T2')

T1 {TT} = T1'
T2 {TT} = T2'
-------------------------- S-Arrow
(T1->T2) {TT} = (T1'->T2')



judgment subst-const: C {TT} = C


---------------- S-True
true {TT} = true

T1 {TT} = T1'
T2 {TT} = T2'
------------------------ S-Equal
(T1=T2) {TT} = (T1'=T2')

C1 {TT} = C1'
C2 {TT} = C2'
------------------------ S-And
(C1&C2) {TT} = (C1'&C2')



judgment contraints-satisfied: C true

--------- CS-True
true true

---------- CS-Equal
T = T true

C1 true
C2 true
------------ CS-Both
C1 & C2 true


lemma test:
    forall eq1: t1 == fn x1 => fn x2 => (x1 x2)
    forall eq2: t2 == fn x3 => (x3 @ 1)
    forall eq3: t3 == (unit, fn x4 => x4)
    exists *; 0 |- (t1 t2)t3 : T if C -| n
    and    C {TT} = C'
    and    C' true
    use inversion on eq1 where t1 := fn x1 => fn x2 => (x1 x2)
    use inversion on eq2 where t2 := fn x3 => (x3 @ 1)
    use inversion on eq3 where t3 := (unit, fn x4 => x4)
    // TODO: prove this
    d: *; 0 |- (t1 t2)t3 : T if C -| n by unproved
    sc: C {TT} = C' by unproved
    c: C' true by unproved
    proof by d, sc, c
end lemma